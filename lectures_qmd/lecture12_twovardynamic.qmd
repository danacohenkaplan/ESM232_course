---
title: 'Dynamic systems with more than one dependent variable'
format: revealjs
execute: 
  echo: TRUE
theme: solarized
resources: ["img/"]
css: ["slides.css"]
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(sensitivity)
library(tidyverse)
library(deSolve)
library(lhs)
library(purrr)
library(here)
library(ggpubr)
```

## Systems of equations {.scrollable}

What if we have more than one variable that is evolving through time and space?


  * populations of two species that are changing through time, and interact with each other
  
  * pollutant concentrations in a diffusion-advection model where the two pollutants also interact with each other
  
  * growth of above-ground and below-ground carbon and nitrogen in a forest
  
  * household consumption and savings through time (when consumption depends on savings and vice versa)
  

These require several differential equations that have to be solved simultaneously 



## Systems of equations {.scrollable}

* can be ordinary (differentiating with respect to one variable (time or space))

* partial if differentiating with respect to multiple variables (x,y,z, time)


We can estimate trajectories of systems of equations in much the same way that we
used numerical integration for our ODE's


Here again methods (especially for complicated parital derivative system of equations ) can be complicated

Call your engineering/math when you run into issues!

## Dynamics of two (or more) variables

* two variable dynamic models that have feedbacks between variables can create cyclical
dynamics (and more complex )

* Two ways to look at results

  * time series of each state variable
  
  * how state variables interact with each other


##  Predator-Prey Models 

Predator-Prey models

A simple approach that assumes
prey grow exponentially, with a fixed intrinsic growth rate

* a fixed mortality rate of predators
* a fixed rate of consumption/predation rate of prey by predators
* a fixed conversion rate (ingestion rate) that determines how many “new” predators you get with predation
* no environmental effects (e.g no carrying capacity)



---

##  Predator-Prey Model 

Analogs

As with diffusion, the basic form/ideas in this model can be applied elsewhere

* economics

* infectious disease spread

* combustion

---

## Differential equations for a Predator-Prey Model

* Prey

$\frac{\partial prey}{\partial t} = r_{prey} * prey - \alpha * prey * pred$

* Predator

$\frac{\partial pred}{\partial t} = eff * \alpha * pred * prey - mort * pred$

## Predator Prey - Implementation in R {.scrollable}

* Ordinary Differential Equation with two dependent variables

* Still use **ODE** solve in R

* Still code the derivative as a function 

* Use lists or vectors to bring in initial conditions for all dependent variables; (similar how we bring in multiple parameters to derivative definition function)

* use *with* can help make it easier to code the use of parameters within the derivative definition function (see example below)

* use lists to output derivatives for all dependent variable

## Example implementation

```{r}
source(here("R/lotvmod.R"))
lotvmod

# note the use of with
# initial conditions
currpop <- c(prey = 10, pred = 1)

# time points to see results
days <- seq(from = 1, to = 100, by = 1)

# set parameters
pars <- c(rprey = 0.5, alpha = 0.3, eff = 0.2, pmort = 0.2, K = 100)

# run the model
res <- ode(func = lotvmod, y = currpop, times = days, parms = pars)
```

## Run this model - how would you visualize results?

## Visualizing results

* two variable dynamic models that have feedbacks between variables can create cyclical
dynamics (and more complex )

* Two ways to look at results

  * time series of each state variable  (pred and prey)
  
  * how state variables interact with each other 
    * interactions through time
    * x versus y colored by time

## Relationship between populations {.scrollable}
```{r}
# graph the results
head(res)
# rearrange for easy plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "animal", values_to = "pop")
p1 <- ggplot(resl, aes(time, pop, col = animal)) +
  geom_line()

p1


p2 <- ggplot(as.data.frame(res), aes(pred, prey)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2

# To make this easier to understand - maybe
p2b <- ggplot(as.data.frame(res), aes(pred, prey, col = time)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2b

ggarrange(p1, p2b)
```

# Try other parameters {.scrollable}

- try to bring relative size of predators (versus prey) higher 

- what if you increase the predation rates (what might that look like in reality)

- how might you add a carrying capacity   

## Other illustations


* Prey

$\frac{\partial prey}{\partial t} = r_{prey} * prey - \alpha * prey * pred$

* Predator

$\frac{\partial pred}{\partial t} = eff * \alpha * pred * prey - mort * pred$

Predator and Prey with Carrying Capacity?

How would you code that?


## With Carrying Capacity

* Prey

$\frac{\partial prey}{\partial t} = r_{prey} * (1-\frac{prey}{K})*prey - \alpha * prey * pred$

* Predator

$\frac{\partial pred}{\partial t} = eff * \alpha * pred * prey - mort * pred$

## Implementation {.scrollable}

```{r examples}
source(here("R/lotvmodK.R"))
lotvmodK

# initial conditions
currpop <- c(prey = 1, pred = 1)

# set parameter list
pars <- c(rprey = 0.1, alpha = 0.6, eff = 0.8, pmort = 0.4, K = 20)

# times when you want to evaluate
days <- seq(from = 1, to = 500)

# run our differential equation solver
res <- ode(func = lotvmodK, y = currpop, times = days, parms = pars)

# rearrange for plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "species", values_to = "pop")

# graph both populations over time
p1 <- ggplot(resl, aes(time, pop, col = species)) +
  geom_line()
p1

# also look at relationships between preditor and prey population and use color for time
# I will remove the legend here to make it easier to see
p2 <- ggplot(as.data.frame(res), aes(pred, prey, col = (round(time / 10)))) +
  geom_point() +
  theme(legend.position = "none")
p2
p2 <- ggplot(as.data.frame(res), aes(pred, prey, col = as.factor(round(time / 10)))) +
  geom_point() +
  theme(legend.position = "none")
p2
ggarrange(p1, p2)

# try with different parameter sets, can you create one where populations are stable - less cycling?
```

## Another Example: Competition

Species 1 (or Company 1)

$\frac{\partial s_1}{\partial t} = r_{1} * s_1 * (1-(\frac{s_1+\alpha_{12} * s_2}{K_1}))$

Species 2 (or Company 2)

$\frac{\partial s_2}{\partial t} = r_{2} * s_2 * (1-(\frac{s_2+\alpha_{21} * s_1}{K_2}))$

* How might you explain what this is doing?
* What do the coefficients "mean"


## Competition {.scrollable}


Species 1 (or Company 1)

$\frac{\partial s_1}{\partial t} = r_{1} * s_1 * (1-(\frac{s_1+\alpha_{12} * s_2}{K_1}))$

Species 2 (or Company 2)

$\frac{\partial s_2}{\partial t} = r_{2} * s_2 * (1-(\frac{s_2+\alpha_{21} * s_1}{K_2}))$

* $s_1, s_2$ are species populations
* $r_1, r_2$ are growth rates of each species
* $K_1, K_2$ are carrying capacities; could be the same for both species but maybe not?
* $\alpha_{12}, \alpha_{21}$ are competitive effect of the other species; could be the same for both species

## And just for fun (I'll exxplan why) {.scrollable}

* Lorenz Equations (for fluid dynamics), 

*  x,y,z variables that change with time that describe how convection in the atmosphere works - a cell that is warmed from below and cooled from above
 
  * x rate of convective overturning
  * y departure from linear horizontal (upwelling/downwelling) temperature gradient
  * z departure from linear vertical temperature difference
  
*  3 equations (dx/dt, dy/dt, dz/dt) that describe how these variables change with time  
  
 *  3 parameters (a,b,c) related to atmospheric properties

* Developed by Meteorologist Edward Lorenz - early climate model development in 1960s
 
* Lorenz equations are example of dynamic systems that can exhibit stable and chaotic states depending on parameters and initial conditions

## Code for Lorenz system

Lets look at a Lorenz System Code
```{r lorenze}
# lorenz
source(here("R/lorenz.R"))

lorenz
```

## Application of Lorenz {.scrollable}


```{r lorenzeapp}
pars <- list(a = 10, b = 28, c = 8 / 3)
res <- ode(func = lorenz, c(x = 0.1, y = 0, z = 0), times = seq(0, 50, by = 0.01), parms = pars)
```
 now plot 


* as a phase space diagram (x vs y, x vs z, y vs z) - using time for color
* as a time series (e.g time on the x axis) add each variable with a different color

then try with different initial conditions

## Plots {.scrollable}

```{r, lr1}


ggplot(as.data.frame(res), aes(x, y, col = time)) +
  geom_point()
ggplot(as.data.frame(res), aes(x, z, col = time)) +
  geom_point()
ggplot(as.data.frame(res), aes(y, z, col = time)) +
  geom_point()

resl <- as.data.frame(res) %>% gather(key = "var", value = "value", -time)
ggplot(resl, aes(time, value, col = var)) +
  geom_line()
```

## Plot with different initial conditions
```{r, lr2}
# try with different initial conditions
pars <- list(a = 15, b = 28, c = 8 / 4)
res <- ode(func = lorenz, c(x = 0.3, y = 5, z = 10), times = seq(0, 50, by = 0.01), parms = pars)

ggplot(as.data.frame(res), aes(x, y, col = time)) +
  geom_point() +
  scale_colour_gradientn(colours = terrain.colors(10))
ggplot(as.data.frame(res), aes(x, z, col = time)) +
  geom_point() +
  scale_colour_gradientn(colours = terrain.colors(10))
ggplot(as.data.frame(res), aes(y, z, col = time)) +
  geom_point() +
  scale_colour_gradientn(colours = terrain.colors(10))

resl <- as.data.frame(res) %>% gather(key = "var", value = "value", -time)
ggplot(resl, aes(time, value, col = var)) +
  geom_line()
```


## Sensitivity analysis

Consider pred-prey 
BUT what will be the output - if we want to 'quantify sensitivity'
useful to look at a single value or set of value

For example

* Max Prey/Predator Population
* Min Prey/Predator Population
* Populations at the end of the time period
* Number of time periods where a population is below a threshold

## Sensitivity Analysis steps

* Generate parameters (LHS, Sobol)
* Metrics function
* Wrapper Function
* Run wrapper function to get metrics for all parameter sets
* Graph and compute sensitivity statistics


## Example Sensitivity Analysis {.scrollable}

Given a Predator Prey model with the possible values for parameters

* $K$ - mean of 150, standard deviation 20
* $r_{prey}$ - some where between 0.01 and 0.3
* $\alpha$ - somewhere between 0.1 and 0.4
* $eff$ - mean 0.3 standard deviation 0.01
* $pmort$ - somewhere between 0.01 and 0.45
* Initial Conditions:  start with 1 predator and 1 prey 
* Look at output for 500 time steps

Questions sensitivity analysis might answer

* Does uncertainty in parameter impact our estimates? 
* Which are the more/most important parameters in controlling population dynamics?

# Set up Sobol Sensitivity {.scrollable}

* parameter samples
* metric and wrapper function


```{r odesen}
source(here("R/lotvmodK.R"))
# lets start with sobol
library(sensitivity)


# want to learn about sensitivity to growth rate (r) and carrying capacity
# set the number of parameters
np <- 200
K <- rnorm(mean = 150, sd = 20, n = np)
rprey <- runif(min = 0.01, max = 0.3, n = np)
alpha <- runif(min = 0.1, max = 0.4, n = np)
eff <- rnorm(mean = 0.3, sd = 0.01, n = np)
pmort <- runif(min = 0.01, max = 0.45, n = np)

X1 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort)

# repeat to get our second set of samples
np <- 200
K <- rnorm(mean = 150, sd = 20, n = np)
rprey <- runif(min = 0.01, max = 0.3, n = np)
alpha <- runif(min = 0.1, max = 0.4, n = np)
eff <- rnorm(mean = 0.3, sd = 0.01, n = np)
pmort <- runif(min = 0.01, max = 0.45, n = np)

X2 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort)


# create our sobel object and get sets ofparameters for running the model
sens_PP <- sobolSalt(model = NULL, X1, X2, nboot = 300)

# name parameter sets...
colnames(sens_PP$X) <- c("rprey", "K", "alpha", "eff", "pmort")

# our metrics
# lets say we  want the maximum and minimum  of both predictor and prey

compute_metrics <- function(result) {
  maxprey <- max(result$prey)
  maxpred <- max(result$pred)
  minprey <- min(result$prey)
  minpred <- min(result$pred)
  return(list(maxprey = maxprey, minprey = minprey, maxpred = maxpred, minpred = minpred))
}

# build a wrapper function


p_wrapper <- function(rprey, alpha, eff, pmort, K, currpop, days, func) {
  parms <- list(rprey = rprey, alpha = alpha, eff = eff, pmort = pmort, K = K)
  result <- ode(y = currpop, times = days, func = func, parms = parms)
  colnames(result) <- c("time", "prey", "pred")
  # get metrics
  metrics <- compute_metrics(as.data.frame(result))
  return(metrics)
}

```

## Now run wrapper for all parameters {.scrollable}

* graph 
* sobol indices

```{r odesen2}
# run our model for all parameters and extract the results
currpop <- c(prey = 1, pred = 1)
days <- seq(from = 1, to = 500)
allresults <- as.data.frame(sens_PP$X) %>% 
    pmap(p_wrapper, currpop = currpop, days = days, func = lotvmodK)

# take results back to unlisted form
allres <- allresults %>% map_dfr(`[`, c("maxprey", "minprey", "maxpred", "minpred"))


# range of response across parameter uncertainty
allresl <- allres %>% gather(key = "metric", value = "pop")
ggplot(allresl, aes(metric, pop)) +
  geom_boxplot()

# dealing with different scales
ggplot(allresl, aes(metric, pop, col = metric)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free")
# plot cummulative densities

ggplot(allresl, aes(pop, col = metric)) +
  stat_ecdf(geom = "line") +
  facet_wrap(~metric, scales = "free")
```

# Sobol Indices

```{r, sobol}
# create sobol indices for Max Prey
sens_PP_maxprey <- sens_PP %>% sensitivity::tell(y = allres$maxprey)
rownames(sens_PP_maxprey$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxprey$S
rownames(sens_PP_maxprey$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxprey$T

```

## Interpretation of Sobol Indices

* what are the most important parameters 
  *  maximum prey
  
* What about other metrics
  *  minimum prey
  *  maximum predator
  *  minimum predator
  
What is the most important parameter, 
Which parameters don't matter
  
## Organizing your analysis {.scrollable}
```{r, org}

# keep track of sensitivity from all metricx

sens_PP_minprey <- sens_PP %>% sensitivity::tell(y = allres$minprey)
rownames(sens_PP_minprey$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_minprey$S
rownames(sens_PP_minprey$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_minprey$T

sens_PP_maxpred <- sens_PP %>% sensitivity::tell(y = allres$maxpred)
rownames(sens_PP_maxpred$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxpred$S
rownames(sens_PP_maxpred$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_maxpred$T
sens_PP_minpred <- sens_PP %>% sensitivity::tell(y = allres$minpred)
rownames(sens_PP_minpred$S) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_minpred$S
rownames(sens_PP_minpred$T) <- c("rprey", "K", "alpha", "eff", "pmort")
sens_PP_minpred$T


# put together in a table
sobol_sumS = as.data.frame(
   rbind(
    sens_PP_maxprey$S$original,
    sens_PP_minprey$S$original,
   sens_PP_maxpred$S$original,
    sens_PP_minpred$S$original
  ))
colnames(sobol_sumS) <- c("rprey", "K", "alpha", "eff", "pmort")
rownames(sobol_sumS) <- c("maxprey", "minprey", "maxpred", "minpred")
sobol_sumS


```
  

# Stablity {.scrollable}

* simple mathematical definition - when derivatives are zero
  * algerbra
  * plotting
  
* more complex definitions - think of metrics that looks at
ranges, cycling, return to a population above some threshold after disturbance

* for more complex definitions of stability you'd need to do the
integration (e.g run the ode solver) and then  compute a metric of stability
   * min or max always above or below a threshold
   * long term values (e.g after X years)


## Adding More Complex Inputs {.scrollable}

* What if carrying capacity varied with air temperature

Conceptual Model

* There is a known optimal carrying capacity (*Kopt*)
  * *Kopt* when ecosystem is at optimal temperature (*Topt*)
  * As temperature increases or decreases from *Topt*, carrying capacity decreases
  * *Ksen* is a sensitivity coefficient that describes how much carrying capacity changes with temperature
`
* Carrying capacity is a function of temperature
$K = K_{opt} * (1 - K{sen} * (airT(t) - T_{opt}))$

  * airT(t) is the air temperature at time t

# Implementation Details

* We would also need a model of carrying capacity (K)
  * determistic (not-dynamic) submodel
  * needs a time series of air temperature as input
  
How do you combine these different types of inputs/parameters and different types of models together

## Dynamic Carrying Capacity Example


* Carrying Capacity

$K = K_{opt} * (1 - K{sen} * (airT(t) - T_{opt}))$

* Prey

$\frac{\partial prey}{\partial t} = r_{prey} * (1-\frac{prey}{K})*prey - \alpha * prey * pred$

* Predator

$\frac{\partial pred}{\partial t} = eff * \alpha * pred * prey - mort * pred$

# Code {.scrollable}
```{r, varyK}
source(here("R/lotvmodvaryingK.R"))
lotvmodKvar




# initial conditions
currpop <- c(prey = 10, pred = 1)



# set parameters and inputs
# read in air temperature time series
airT = readRDS(here("Data/Tavg_Rattlesnake.RDS"))
head(airT)
#note if you were interested in specific periods you might want to subset this data

# time points to see results
days <- seq(from = 1, to = length(airT$tavg), by = 1)

# note you have to use a list now because elements are of a different length
pars <- list(rprey = 0.5, alpha = 0.3, eff = 0.2, pmort = 0.2, KO= 100, Topt=18, Ksen=0.3, airT=airT$tavg)

# run the model
res <- ode(func = lotvmodKvar, y = currpop, times = days, parms = pars)
# graph the results
head(res)
# rearrange for easy plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "animal", values_to = "pop")
p1 <- ggplot(resl, aes(time, pop, col = animal)) +
  geom_line()

p1


p2 <- ggplot(as.data.frame(res), aes(pred, prey)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2

# To make this easier to understand - maybe
p2b <- ggplot(as.data.frame(res), aes(pred, prey, col = time)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
p2b

ggarrange(p1, p2b)
```
## Assignment {.scrollable}

Consider how you might add hunting of prey to the predator prey model that we've been using in class

**Part 1**: 

Build this model (e.g add hunting to the lotvmodK.R),

Some requirements/hints for your model

You should make sure that you don't hunt more prey than exist.

To ensure that you might also add a minimum prey population input that must be met before hunting is allowed.

Note you can make this as simple or as complex as you would like. You could represent hunting in a way that is similar to "harvesting" in the last assignment. 

**Part 2**

Explore how different hunting levels and different minimum prey populations (before hunting is allowed) are likely to effect the stability of the populations of both predator and prey.
A key challenge is how you might want to define stability? It is up to you but you will need to write a sentence to explain why you chose the measure that you did. 
It could be something as simple as maintaining a population above some value 50 years into the future.  

Use this exploration to recommend a hunting target that will be sustainable (e.g leave you with a stable prey and predator population).

It is up to you how you "explore" hunting  - you can simply try different values of the parameters in your hunting model or do it more formally by running your model across a range of values. You could think about parameter interactions

You can assume the following are best guesses of key parameters

rprey=0.95, alpha=0.01, eff=0.6,pmort=0.4, K=2000,

Submit - the Quatro document with your analysis AND a pdf/html version, any R files
This should include

a) your hunting model

b) your exploration (e.g how you tested different hunting levels and how you defined a stability metric

c) provides you estimated sustainable hunting level and brief explanation of why you chose the metric you did




